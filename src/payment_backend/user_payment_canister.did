type BrandingConfig = record {
  company_name : text;
  logo_url : opt text;
  terms_url : opt text;
  support_url : opt text;
};
type CouponType = variant {
  FreeShipping;
  FixedAmount : nat64;
  Percentage : nat32;
};
type CouponUsage = record {
  user_principal : principal;
  invoice_id : text;
  usage_id : text;
  coupon_id : text;
  used_at : nat64;
  discount_applied : nat64;
};
type DiscountCoupon = record {
  updated_at : nat64;
  usage_limit : opt nat32;
  applicable_tokens : vec text;
  code : text;
  coupon_id : text;
  description : text;
  created_at : nat64;
  minimum_amount : opt nat64;
  coupon_type : CouponType;
  used_count : nat32;
  is_active : bool;
  expires_at : opt nat64;
};
type InvoiceStatus = variant { Paid; Cancelled; Created; Expired };
type ModalAnalytics = record {
  conversion_rate : float64;
  revenue_generated : nat64;
  modal_id : text;
  successful_payments : nat64;
  total_views : nat64;
};
type ModalConfig = record {
  payment_options : PaymentOptions;
  theme : ModalTheme;
  updated_at : nat64;
  redirect_urls : RedirectUrls;
  name : text;
  description : opt text;
  created_at : nat64;
  template_id : opt text;
  modal_id : text;
  is_active : bool;
  branding : BrandingConfig;
};
type ModalTheme = record {
  text_color : text;
  border_radius : nat32;
  font_family : text;
  primary_color : text;
  background_color : text;
};
type PaymentAnalytics = record {
  success_rate : float64;
  total_transactions : nat64;
  top_tokens : vec text;
  total_volume : vec record { text; nat64 };
  average_amount : vec record { text; nat64 };
};
type PaymentInvoice = record {
  id : text;
  status : InvoiceStatus;
  token : TokenConfig;
  metadata : vec record { text; text };
  description : text;
  created_at : nat64;
  merchant : principal;
  amount : nat64;
  expires_at : opt nat64;
};
type PaymentOptions = record {
  require_shipping : bool;
  enable_tips : bool;
  require_email : bool;
  show_amount_breakdown : bool;
  allowed_tokens : vec text;
};
type PaymentTransaction = record {
  id : text;
  to : principal;
  fee : nat64;
  status : TransactionStatus;
  merchant_fee : nat64;
  token : TokenConfig;
  metadata : vec record { text; text };
  from : principal;
  timestamp : nat64;
  amount : nat64;
};
type RedirectUrls = record {
  webhook_url : opt text;
  success_url : text;
  cancel_url : text;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat32; Err : text };
type Result_10 = variant { Ok : record { text; nat64 }; Err : text };
type Result_11 = variant { Ok : nat64; Err : text };
type Result_2 = variant { Ok : text; Err : text };
type Result_3 = variant { Ok : PaymentInvoice; Err : text };
type Result_4 = variant { Ok : DiscountCoupon; Err : text };
type Result_5 = variant { Ok : record { nat32; vec CouponUsage }; Err : text };
type Result_6 = variant { Ok : ModalAnalytics; Err : text };
type Result_7 = variant { Ok : ModalConfig; Err : text };
type Result_8 = variant { Ok : PaymentTransaction; Err : text };
type Result_9 = variant { Ok : bool; Err : text };
type TokenConfig = record {
  fee : nat64;
  decimals : nat8;
  logo : opt text;
  name : text;
  canister_id : principal;
  is_active : bool;
  symbol : text;
};
type TransactionStatus = variant {
  Failed : text;
  Refunded;
  Completed;
  Pending;
};
type UserCanisterConfig = record {
  merchant_fee : nat32;
  name : text;
  custom_settings : vec record { text; text };
  description : text;
  webhook : opt text;
  withdraw_threshold : opt nat64;
  auto_withdraw : bool;
  supported_tokens : vec TokenConfig;
};
service : (UserCanisterConfig, principal) -> {
  add_supported_token : (TokenConfig) -> (Result);
  admin_clear_all_coupons : () -> (Result_1);
  admin_update_owner : (principal) -> (Result);
  canister_id : () -> (principal) query;
  create_coupon : (DiscountCoupon) -> (Result_2);
  create_invoice : (nat64, text, text, vec record { text; text }) -> (Result_3);
  create_modal_config : (ModalConfig) -> (Result_2);
  delete_coupon : (text) -> (Result);
  delete_modal_config : (text) -> (Result);
  generate_modal_embed_code : (text) -> (Result_2);
  get_all_balances : () -> (vec record { text; nat64 }) query;
  get_analytics : (opt text, opt text) -> (PaymentAnalytics) query;
  get_balance : (text) -> (nat64) query;
  get_configuration : () -> (UserCanisterConfig) query;
  get_coupon : (text) -> (Result_4) query;
  get_coupon_by_code : (text) -> (Result_4) query;
  get_coupon_usage_stats : (text) -> (Result_5) query;
  get_invoice : (text) -> (opt PaymentInvoice) query;
  get_modal_analytics : (text) -> (Result_6) query;
  get_modal_config : (text) -> (Result_7) query;
  get_owner : () -> (principal) query;
  get_supported_tokens : () -> (vec TokenConfig) query;
  get_transaction : (text) -> (opt PaymentTransaction) query;
  get_transaction_history : (nat64, nat64) -> (vec PaymentTransaction) query;
  health : () -> (text, nat64, nat64) query;
  list_active_coupons : () -> (vec DiscountCoupon) query;
  list_my_coupons : () -> (vec DiscountCoupon) query;
  list_my_modals : () -> (vec ModalConfig) query;
  process_payment : (text, principal) -> (Result_8);
  remove_supported_token : (text) -> (Result);
  toggle_coupon_status : (text) -> (Result_9);
  toggle_token_status : (text) -> (Result_9);
  track_modal_view : (text) -> (Result);
  update_configuration : (UserCanisterConfig) -> (Result);
  update_coupon : (text, DiscountCoupon) -> (Result);
  update_modal_config : (text, ModalConfig) -> (Result);
  update_supported_token : (text, TokenConfig) -> (Result);
  validate_and_use_coupon : (text, nat64, text) -> (Result_10);
  whoami : () -> (principal) query;
  withdraw : (text, nat64, principal) -> (Result_11);
}
