type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type Subaccount = blob;
type Result_6 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_5 = 
 variant {
   err: text;
   ok: Invoice;
 };
type Result_4 = 
 variant {
   err: text;
   ok: text;
 };
type Result_3 = 
 variant {
   err: text;
   ok;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Item;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Profile;
 };
type Result = 
 variant {
   err: TransferError;
   ok: nat;
 };
type Profile = 
 record {
   description: text;
   name: text;
   profilePicture: opt blob;
 };
type NewItemRequest = 
 record {
   available: bool;
   category: text;
   cost: nat;
   merchant: principal;
   name: text;
 };
type Item = 
 record {
   available: bool;
   category: text;
   cost: nat;
   id: nat;
   merchant: principal;
   name: text;
   wallet: opt Subaccount;
 };
type Invoice = 
 record {
   amount: nat;
   itemId: nat;
   merchant: principal;
   to: Account;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : {
  addNewItem: (NewItemRequest) -> (Result_6);
  addNewProfile: (Profile) -> (Result_1);
  bitFabricCanister: () -> (text) query;
  buyItem: (nat) -> (Result_4);
  canCreateStore: () -> (bool) query;
  getBalance: () -> (nat);
  getInvoice: (nat) -> (Result_5);
  getItem: (nat) -> (Result_2);
  getProfile: (principal) -> (Result_1);
  mintBTC: () -> (Result_4);
  payInvoice: (Invoice) -> (Result_3);
  updateItem: (nat, Item) -> (Result_2);
  updateProfile: (Profile) -> (Result_1);
  whoami: () -> (text);
  whoamisub: () -> (Subaccount) query;
  withdraw: () -> (Result);
}
