type InvoiceStatus = variant {
    Created;
    Paid;
    Expired;
    Cancelled;
};

type TransactionStatus = variant {
    Pending;
    Completed;
    Failed : text;
    Refunded;
};

type TokenConfig = record {
    symbol : text;
    name : text;
    decimals : nat8;
    canister_id : principal;
    fee : nat64;
    logo : opt text;
    is_active : bool;
};

type UserCanisterConfig = record {
    name : text;
    description : text;
    supported_tokens : vec TokenConfig;
    webhook : opt text;
    merchant_fee : nat32;
    auto_withdraw : bool;
    withdraw_threshold : opt nat64;
    custom_settings : vec record { text; text };
};

type PaymentInvoice = record {
    id : text;
    merchant : principal;
    amount : nat64;
    token : TokenConfig;
    description : text;
    metadata : vec record { text; text };
    expires_at : opt nat64;
    created_at : nat64;
    status : InvoiceStatus;
};

type PaymentTransaction = record {
    id : text;
    from : principal;
    to : principal;
    token : TokenConfig;
    amount : nat64;
    fee : nat64;
    merchant_fee : nat64;
    timestamp : nat64;
    status : TransactionStatus;
    metadata : vec record { text; text };
};

type PaymentAnalytics = record {
    total_transactions : nat64;
    total_volume : vec record { text; nat64 };
    success_rate : float64;
    average_amount : vec record { text; nat64 };
    top_tokens : vec text;
};

// Modal Builder Types
type ModalTheme = record {
    primary_color : text;
    background_color : text;
    text_color : text;
    border_radius : nat32;
    font_family : text;
};

type PaymentOptions = record {
    allowed_tokens : vec text;
    require_email : bool;
    require_shipping : bool;
    show_amount_breakdown : bool;
    enable_tips : bool;
};

type BrandingConfig = record {
    logo_url : opt text;
    company_name : text;
    support_url : opt text;
    terms_url : opt text;
};

type RedirectUrls = record {
    success_url : text;
    cancel_url : text;
    webhook_url : opt text;
};

type ModalConfig = record {
    modal_id : text;
    name : text;
    description : opt text;
    theme : ModalTheme;
    payment_options : PaymentOptions;
    branding : BrandingConfig;
    redirect_urls : RedirectUrls;
    template_id : opt text;
    created_at : nat64;
    updated_at : nat64;
    is_active : bool;
};

type ModalAnalytics = record {
    modal_id : text;
    total_views : nat64;
    successful_payments : nat64;
    conversion_rate : float64;
    revenue_generated : nat64;
};

type Result = variant { Ok : PaymentInvoice; Err : text };
type Result_1 = variant { Ok : PaymentTransaction; Err : text };
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : nat64; Err : text };
type Result_4 = variant { Ok : bool; Err : text };
type Result_5 = variant { Ok : text; Err : text };
type Result_6 = variant { Ok : ModalConfig; Err : text };
type Result_7 = variant { Ok : ModalAnalytics; Err : text };

service : (UserCanisterConfig, principal) -> {
    canister_id : () -> (principal) query;
    create_invoice : (nat64, text, text, vec record { text; text }) -> (Result);
    get_all_balances : () -> (vec record { text; nat64 }) query;
    get_analytics : (opt text, opt text) -> (PaymentAnalytics) query;
    get_balance : (text) -> (nat64) query;
    get_configuration : () -> (UserCanisterConfig) query;
    get_invoice : (text) -> (opt PaymentInvoice) query;
    get_owner : () -> (principal) query;
    get_supported_tokens : () -> (vec TokenConfig) query;
    get_transaction : (text) -> (opt PaymentTransaction) query;
    get_transaction_history : (nat64, nat64) -> (vec PaymentTransaction) query;
    health : () -> (text, nat64, nat64) query;
    process_payment : (text, principal) -> (Result_1);
    update_configuration : (UserCanisterConfig) -> (Result_2);
    whoami : () -> (principal) query;
    withdraw : (text, nat64, principal) -> (Result_3);
    
    // Token Management Methods
    add_supported_token : (TokenConfig) -> (Result_2);
    remove_supported_token : (text) -> (Result_2);
    update_supported_token : (text, TokenConfig) -> (Result_2);
    toggle_token_status : (text) -> (Result_4);
    
    // Modal Builder Methods
    create_modal_config : (ModalConfig) -> (Result_5);
    update_modal_config : (text, ModalConfig) -> (Result_2);
    get_modal_config : (text) -> (Result_6) query;
    list_my_modals : () -> (vec ModalConfig) query;
    delete_modal_config : (text) -> (Result_2);
    track_modal_view : (text) -> (Result_2);
    get_modal_analytics : (text) -> (Result_7) query;
    generate_modal_embed_code : (text) -> (Result_5);
    
    // Admin Methods
    admin_update_owner : (principal) -> (Result_2);
}
